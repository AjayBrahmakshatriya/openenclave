// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef SWITCHLESS_ARGS_H
#define SWITCHLESS_ARGS_H

// This macro is used to denote where the generated files are different for the
// switchless calling implementation.
#ifndef __SWITCHLESS__
#define __SWITCHLESS__ 1
#endif

#include <stdint.h>
#include <stdlib.h> /* for wchar_t */

#include <openenclave/bits/result.h>

#if (__SWITCHLESS__)
#include "thread_control.h"

/* Switchless infrastructure args */

typedef struct _switchless_enc_worker_thread_args_t
{
    oe_result_t _result;
    thread_control* ptc;
} switchless_enc_worker_thread_args_t;
#endif // __SWITCHLESS__

/* args for standard ecalls */

typedef struct _standard_enc_sum_args_t
{
    oe_result_t _result;
    int _retval;
    int arg1;
    int arg2;
} standard_enc_sum_args_t;

/* args for synchronous switchless ecalls */

typedef struct _synchronous_switchless_enc_sum_args_t
{
    oe_result_t _result;
    int _retval;
    int arg1;
    int arg2;
} synchronous_switchless_enc_sum_args_t;

#if (__SWITCHLESS__)
/* trusted function ids */
enum
{
    fcn_id_switchless_enc_worker_thread = 0,
    fcn_id_standard_enc_sum = 1,
    fcn_id_trusted_call_id_max = OE_ENUM_MAX
};

/* synchronous switchless trusted function ids */
enum
{
    fcn_id_synchronous_switchless_enc_sum = 0,
    fcn_id_synchronous_switchless_call_id_max = OE_ENUM_MAX
};
#else  // __SWITCHLESS__
/* trusted function ids */
enum
{
    fcn_id_standard_enc_sum = 0,
    fcn_id_synchronous_switchless_enc_sum = 1,
    fcn_id_trusted_call_id_max = OE_ENUM_MAX
};
#endif // __SWITCHLESS__

/* untrusted function ids */
enum
{
    fcn_id_untrusted_call_max = OE_ENUM_MAX
};

#endif // SWITCHLESS_ARGS_H
